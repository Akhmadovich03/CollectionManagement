@model (CollectionManagement.Models.User User, CollectionManagement.Models.Item Item, List<CollectionManagement.Models.Comment> comments)
@using Newtonsoft.Json.Linq

<header>
    <nav class="navbar fixed-top navbar-dark bg-secondary box-shadow justify-content-between">
        <div class="d-flex">
            <a class="navbar-brand text-light ms-3" href="@Url.ActionLink("Index", "Home", new {userId = Model.User!.Id})" }">
                <i class="bi bi-collection"></i>
                CollectIt
            </a>
            <form class="d-flex ms-5" action="@Url.Action("Details", "Items")">
                <input type="hidden" name="itemId" value="@Model.Item.Id" />
                <input type="hidden" name="userId" value="@Model.User.Id" />
                <input class="form-control me-2" type="search" name="search" placeholder="Search comment" aria-label="Search" value="@ViewBag.Search">
                <button class="btn btn-outline-light" type="submit">
                    <i class="bi bi-search"></i>
                </button>
            </form>
        </div>
        <div class="d-flex" id="rightSideHeader">
            <div class="mt-2 me-2">
                <ejs-switch id="default" onlabel="UZ" offlabel="EN" cssClass="custom-switch bar-color"></ejs-switch>
            </div>
            <div class="mt-2 me-3">
                @{
                    var isDarkTheme = Model.User.PageTheme == CollectionManagement.Models.Enums.Theme.Dark;
                }
                <input type="checkbox" class="checkbox" id="checkbox" @(isDarkTheme ? "checked" : "")>
                <label for="checkbox" class="checkbox-label">
                    <i class="bi bi-moon"></i>
                    <i class="bi bi-sun"></i>
                    <span class="ball"></span>
                </label>
            </div>
            <div class="d-flex me-4">
                @if (Model.User.Email is not null)
                {
                    <div class="dropdown">
                        <a class="nav-link text-white mt-2 dropdown-toggle" href="#" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            @Model.User.UserName
                        </a>
                        <div class="dropdown-menu me-5" aria-labelledby="dropdownMenuLink">
                            <a class="dropdown-item" href="@Url.ActionLink("Edit", "Profile", new {userId = Model.User.Id})" }">
                                <i class="bi bi-gear-fill"></i>
                                Account
                            </a>
                            <a class="dropdown-item" href="@Url.ActionLink("Index", "Profile", new {userId = Model.User.Id})" }">
                                <i class="bi bi-person"></i>
                                Collections
                            </a>
                            @if (Model.User.IsAdmin)
                            {
                                <a class="dropdown-item" href="@Url.ActionLink("Index", "Admin", new {userId = Model.User.Id})" }">
                                    <i class="bi bi-people"></i>
                                    Users
                                </a>
                            }
                            <a class="dropdown-item" href="@Url.Action("Index", "Home")">
                                <i class="bi bi-box-arrow-right"></i>
                                Log out
                            </a>
                        </div>
                    </div>
                }
                else
                {
                    <a class="nav-link text-light mt-2" href="@Url.Action("SignUp", "Auth")">Register</a>
                    <div class="text-light mt-2 me-2 ms-2">
                        or
                    </div>
                    <a class="nav-link text-light mt-2" href="@Url.Action("Index", "Auth")">Sign in</a>
                }
            </div>
        </div>
    </nav>
</header>
@{
    var customFields = !string.IsNullOrEmpty(Model.Item.CustomFieldsData)
        ? JObject.Parse(Model.Item.CustomFieldsData)
        : null;

    var isReadOnly = Model.Item.Collection.User!.Id != Model.User.Id && !Model.User.IsAdmin ? "readonly" : "";
}
<div style="margin-top: 70px; max-height: 90%" class="container border rounded-2 shadow">
    <div class ="d-flex mt-3 mb-3 gap-3">
        <div class="container border border-2 rounded-2 shadow">
            <div class="mb-3">
                <label>Collection name</label>
                <input type="text" value="@Model.Item.Collection.Name" class="form-control" readonly />
            </div>
            <form method="post" action="@Url.Action("Edit", "Items")">
                <div class="mb-3">
                    <label>Name</label>
                    <input type="text" name="itemName" value="@Model.Item.Name" class="form-control" @isReadOnly />
                </div>
                @if (customFields != null)
                {
                    @foreach (var field in customFields)
                    {
                        <div class="mb-3">
                            <label class="w-25">@field.Key</label>
                            <input type="text" name="customFields[@field.Key]" value="@field.Value" class="form-control" @isReadOnly />
                        </div>
                    }
                }  
                <div class="mb-3">
                    <label>Created at</label>
                    <input type="datetime" value="@Model.Item.CreatedAt" class="form-control" readonly />
                </div>
                @if(Model.Item.Collection.User!.Id == Model.User.Id || Model.User.IsAdmin)
                {
                    <div class="d-flex justify-content-center align-items-center mb-3">
                        <button type="submit" class="btn btn-outline-success">Save changes</button>
                    </div>
                }
                <input type="hidden" name="itemId" value="@Model.Item.Id" />
                <input type="hidden" name="userId" value="@Model.User.Id" />
            </form>
        </div>
        <div class="container border border-2 rounded-2 shadow" style="max-height: 600px;">
            <div id="commentsContainer" class="overflow-auto" style="max-height: 500px;">
                @if (Model.comments.Count == 0)
                {
                    <div class="mt-2 ms-2">
                        <h5>There are no comments yet</h5>
                    </div>
                }
                else
                {
                    @foreach (var comment in Model.comments)
                    {
                        <div class="container border border-2 rounded-4 mt-2">
                            <div class="fw-bolder" style="font-size: small;">
                                @comment.User.UserName
                            </div>
                            <div style="font-size: smaller;">
                                <textarea class="w-100 ms-1 border-0" rows="1" readonly>@comment.Content</textarea>
                            </div>
                        </div>
                    }
                }
            </div>
            <form id="commentForm" class="d-flex align-items-center p-2 mt-2">
                <input type="hidden" id="userId" name="userId" value="@Model.User.Id" />
                <input type="hidden" id="itemId" name="itemId" value="@Model.Item.Id" />
                <input type="text" class="form-control border-2 rounded-pill" placeholder="Write your comment" id="content" name="content" />
                <button type="submit" class="btn btn-link text-primary ms-2" id="sendComment">
                    <i class="bi bi-send"></i>
                </button>
            </form>
        </div>
    </div>
    <div class="row mb-2">
        <div class="col d-flex justify-content-between">
            <a href="@Url.Action("Index", "Items", new{collectionId = Model.Item.CollectionId, userId = Model.User.Id})"
               class="btn btn-outline-secondary">
                Back to items
            </a>
            @if (Model.Item.Collection.User!.Id == Model.User.Id || Model.User.IsAdmin)
            {
                <button class="btn btn-outline-danger" id="deleteItem">Delete item</button>
            }
        </div>
        <div class="col">
        </div>
    </div>
</div>

<script>
    const html = document.getElementById("htmlPage");
    const checkbox = document.getElementById("checkbox");

    $(document).ready(function () {
        $('form').on('submit', function () {
            const customFieldsData = JSON.stringify('@customFields');
            $('#customFieldsData').val(customFieldsData);
        });

        $('#commentForm').submit(function (e) {
            e.preventDefault();

            if ($('#userId').val() == 0) {
                alert('You need to sign in first');
                return;
            }
            console.log(1);

            $.ajax({
                url: '@Url.Action("AddComment", "Items")',
                type: 'POST',
                data: $(this).serialize(),
                success: function (response) {
                    $('#content').val('');
                    fetchComments();
                },
                error: function () {
                    alert('Failed to add comment.');
                }
            });
        });

        function fetchComments() {
            var itemId = $('#itemId').val();
            $.ajax({
                url: '@Url.Action("GetComments", "Items")',
                type: 'GET',
                data: { itemId: itemId },
                success: function (response) {
                    $('#commentsContainer').html(response);
                },
                error: function () {
                    console.log('Failed to fetch comments.');
                }
            });
        }

        $('#deleteItem').on('click', function () {
            var confirmed = confirm('Are you sure you want to delete this item?');

            if (confirmed) {
                var itemId = '@Model.Item.Id';

                $.ajax({
                    url: '/Items/Delete',
                    type: 'POST',
                    data: { itemId: itemId, collectionId: '@Model.Item.CollectionId', userId: '@Model.User.Id' },
                    success: function (response) {
                        if (response.success) {
                            alert('Item deleted successfully.');
                            window.location.href = response.redirectUrl;
                        } else {
                            alert('Failed to delete the item.');
                        }
                    },
                    error: function () {
                        alert('An error occurred while deleting the item.');
                    }
                });
            }
        });

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/commentHub")
            .build();

        connection.on("ReceiveCommentUpdate", function () {
            fetchComments();
        });

        connection.start().then(function () {
            console.log("SignalR connected.");
        }).catch(function (err) {
            console.error("SignalR connection error:", err.toString());
        });

        const theme = checkbox.checked ? "Dark" : "Light";
        html.setAttribute("data-bs-theme", theme.toLowerCase());
    });

    checkbox.addEventListener("change", () => {
        const theme = checkbox.checked ? "Dark" : "Light";
        html.setAttribute("data-bs-theme", theme.toLowerCase());

        $.ajax({
            url: '/UserPreference/EditTheme',
            type: 'POST',
            data: { theme: theme, userId: '@Model.User.Id' },
            success: function (response) {
                console.log('Theme preference updated successfully.');
            },
            error: function () {
                console.error('Failed to update theme preference.');
            }
        });
    });
</script>