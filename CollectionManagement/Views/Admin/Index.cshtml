@model (CollectionManagement.Models.User User, List<CollectionManagement.Models.User> Users)
@{
    ViewData["Title"] = "Users";
}
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

<header>
    <nav class="navbar fixed-top navbar-dark bg-secondary box-shadow justify-content-between">
        <div class="d-flex">
            <a class="navbar-brand text-light ms-3" href="@Url.ActionLink("Index", "Home", new {userId = Model.User!.Id})" }">
                <i class="bi bi-collection"></i>
                @Localizer["Motto"]
            </a>
            <form class="d-flex ms-5" action="@Url.Action("Index", "Admin")">
                <input type="hidden" name="userId" value="@Model.User.Id" />
                <input class="form-control me-2" type="search" name="search" placeholder=@Localizer["Placeholder"] aria-label="Search" value="@ViewBag.Search">
                <button class="btn btn-outline-light" type="submit">
                    <i class="bi bi-search"></i>
                </button>
            </form>
        </div>
        <div class="d-flex" id="rightSideHeader">
            @{
                var isDarkTheme = Model.User.PageTheme == CollectionManagement.Models.Enums.Theme.Dark;
                var isUzbekLanguage = Model.User.PageLanguage == CollectionManagement.Models.Enums.Language.Uzbek;
            }
            <label class="form-check-label text-light mt-2 me-2">UZ</label>
            <div class="mt-2 me-4">
                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" id="localizer" @(isUzbekLanguage ? "" : "checked")>
                    <label class="form-check-label text-light">EN</label>
                </div>
            </div>
            <div class="mt-2 me-3">
                <input type="checkbox" class="checkbox" id="checkbox" @(isDarkTheme ? "checked" : "")>
                <label for="checkbox" class="checkbox-label">
                    <i class="bi bi-moon"></i>
                    <i class="bi bi-sun"></i>
                    <span class="ball"></span>
                </label>
            </div>
            <div class="d-flex me-4">
                @if (Model.User.Email is not null)
                {
                    <div class="dropdown me-3">
                        <a class="nav-link text-white mt-2 dropdown-toggle" href="#" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            @Model.User.UserName
                        </a>
                        <div class="dropdown-menu me-5" aria-labelledby="dropdownMenuLink">
                            <a class="dropdown-item" href="@Url.ActionLink("Edit", "Profile", new {userId = Model.User.Id})" }">
                                <i class="bi bi-gear-fill"></i>
                                Account
                            </a>
                            <a class="dropdown-item" href="@Url.ActionLink("Index", "Profile", new {userId = Model.User.Id})" }">
                                <i class="bi bi-person"></i>
                                Collections
                            </a>
                            @if (Model.User.IsAdmin)
                            {
                                <a class="dropdown-item" href="@Url.ActionLink("Index", "Admin", new {userId = Model.User.Id})" }">
                                    <i class="bi bi-people"></i>
                                    Users
                                </a>
                            }
                            <a class="dropdown-item" href="@Url.Action("Index", "Home")">
                                <i class="bi bi-box-arrow-right"></i>
                                Log out
                            </a>
                        </div>
                    </div>
                }
                else
                {
                    <a class="nav-link text-light mt-2" href="@Url.Action("SignUp", "Auth")">Register</a>
                    <div class="text-light mt-2 me-2 ms-2">
                        or
                    </div>
                    <a class="nav-link text-light mt-2" href="@Url.Action("Index", "Auth")">Sign in</a>
                }
            </div>
        </div>
    </nav>
</header>

<div style="margin-top: 70px">
    <h2>All users</h2>
</div>

<div class="container border border-2 rounded-2 shadow">
    <div class="d-flex justify-content-around mt-2 mb-2">
        <form method="post" action="@Url.Action("Block", "Admin", new { userId = Model.User.Id })" id="blockForm">
            <button type="submit" class="btn btn-danger">
                <i class="fas fa-lock"></i>
                Block
            </button>
            <input type="hidden" name="userIds" id="blockUserIds">
        </form>
        <form method="post" action="@Url.Action("Unlock", "Admin", new { userId = Model.User.Id })" id="unlockForm">
            <button type="submit" class="btn btn-secondary">
                <i class="fas fa-unlock-alt"></i>
                Unlock
            </button>
            <input type="hidden" name="userIds" id="unlockUserIds">
        </form>
        <form method="post" action="@Url.Action("Delete", "Admin", new { userId = Model.User.Id })" id="deleteForm">
            <button type="submit" class="btn btn-danger">
                <i class="fas fa-trash-alt"></i>
                Delete
            </button>
            <input type="hidden" name="userIds" id="deleteUserIds">
        </form>
        <form method="post" action="@Url.Action("SetAsAdmin", "Admin", new { userId = Model.User.Id })" id="adminForm">
            <button type="submit" class="btn btn-success">
                Set as admin
            </button>
            <input type="hidden" name="userIds" id="adminUserIds">
        </form>
        <form method="post" action="@Url.Action("RemoveFromAdmin", "Admin", new { userId = Model.User.Id })" id="removeAdminForm">
            <button type="submit" class="btn btn-secondary">
                Remove from admin
            </button>
            <input type="hidden" name="userIds" id="removedAdminUserIds">
        </form>
    </div>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th><input type="checkbox" id="selectAll"></th>
                <th>Id</th>
                <th>Name</th>
                <th>Email</th>
                <th>Admin</th>
                <th>Blocked</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in Model.Users)
            {
                <tr>
                    <td><input type="checkbox" name="selectedUsers" value="@user.Id"></td>
                    <td>@user.Id</td>
                    <td>@user.UserName</td>
                    <td>@user.Email</td>
                    <td>@user.IsAdmin</td>
                    <td>@user.IsBlocked</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<script>
    const html = document.getElementById("htmlPage");
    const checkbox = document.getElementById("checkbox");

    $(document).ready(function () {
        const theme = checkbox.checked ? "Dark" : "Light";
        html.setAttribute("data-bs-theme", theme.toLowerCase());
    });

    const localizer = document.getElementById("localizer");
    localizer.addEventListener('change', () => {
        const language = localizer.checked ? "English" : "Uzbek";

        $.ajax({
            url: '/UserPreference/EditLanguage',
            type: 'POST',
            data: { language: language, userId: '@Model.User.Id' },
            success: function (response) {
                if (response.success) {
                    location.reload();
                } else {
                    console.error('Failed to update language preference.');
                }
            },
            error: function () {
                console.error('Failed to update language preference.');
            }
        });
    });

    checkbox.addEventListener("change", () => {
        const theme = checkbox.checked ? "Dark" : "Light";
        html.setAttribute("data-bs-theme", theme.toLowerCase());

        $.ajax({
            url: '/UserPreference/EditTheme',
            type: 'POST',
            data: { theme: theme, userId: '@Model.User.Id' },
            success: function (response) {
                console.log('Theme preference updated successfully.');
            },
            error: function () {
                console.error('Failed to update theme preference.');
            }
        });
    });

    document.getElementById('selectAll').onclick = function () {
        var checkboxes = document.querySelectorAll('input[name="selectedUsers"]');
        for (var checkbox of checkboxes) {
            checkbox.checked = this.checked;
        }
    }

    function collectSelectedUserIds() {
        var selectedIds = [];
        document.querySelectorAll('input[name="selectedUsers"]:checked').forEach(checkbox => {
            selectedIds.push(parseInt(checkbox.value));
        });
        return selectedIds;
    }

    document.getElementById('blockForm').onsubmit = function () {
        document.getElementById('blockUserIds').value = JSON.stringify(collectSelectedUserIds());
    }

    document.getElementById('unlockForm').onsubmit = function () {
        document.getElementById('unlockUserIds').value = JSON.stringify(collectSelectedUserIds());
    }

    document.getElementById('deleteForm').onsubmit = function () {
        document.getElementById('deleteUserIds').value = JSON.stringify(collectSelectedUserIds());
    }

    document.getElementById('adminForm').onsubmit = function () {
        document.getElementById('adminUserIds').value = JSON.stringify(collectSelectedUserIds());
    }

    document.getElementById('removeAdminForm').onsubmit = function () {
        document.getElementById('removedAdminUserIds').value = JSON.stringify(collectSelectedUserIds());
    }
</script>