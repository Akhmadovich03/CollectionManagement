@model (CollectionManagement.Models.User User, List<CollectionManagement.Models.Collection> Collections, List<CollectionManagement.Models.User> Users)

<header>
    <nav class="navbar fixed-top navbar-dark bg-secondary box-shadow justify-content-between">
        <div class="d-flex">
            <a class="navbar-brand text-light ms-3" href="@Url.ActionLink("Index", "Home", new {userId = Model.User!.Id})" }">
                <i class="bi bi-collection"></i>
                CollectIt
            </a>
            <form class="d-flex ms-5" action="@Url.Action("Index", "Profile")">
                <input type="hidden" name="userId" value="@Model.User.Id" />
                <input class="form-control me-2" type="search" name="search" placeholder="Search" aria-label="Search" value="@ViewBag.Search">
                <button class="btn btn-outline-light" type="submit">
                    <i class="bi bi-search"></i>
                </button>
            </form>
        </div>
        <div class="d-flex" id="rightSideHeader">
            <div class="mt-2 me-2">
                <ejs-switch id="default" onlabel="UZ" offlabel="EN" cssClass="custom-switch bar-color"></ejs-switch>
            </div>
            <div class="mt-2 me-3">
                @{
                    var isDarkTheme = Model.User.PageTheme == CollectionManagement.Models.Enums.Theme.Dark;
                }
                <input type="checkbox" class="checkbox" id="checkbox" @(isDarkTheme ? "checked" : "")>
                <label for="checkbox" class="checkbox-label">
                    <i class="bi bi-moon"></i>
                    <i class="bi bi-sun"></i>
                    <span class="ball"></span>
                </label>
            </div>
            <div class="d-flex me-4">
                @if (Model.User.Email is not null)
                {
                    <div class="dropdown">
                        <a class="nav-link text-white mt-2 dropdown-toggle" href="#" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            @Model.User.UserName
                        </a>
                        <div class="dropdown-menu me-5" aria-labelledby="dropdownMenuLink">
                            <a class="dropdown-item" href="@Url.ActionLink("Edit", "Profile", new {userId = Model.User.Id})" }">
                                <i class="bi bi-gear-fill"></i>
                                Account
                            </a>
                            <a class="dropdown-item" href="@Url.ActionLink("Index", "Profile", new {userId = Model.User.Id})" }">
                                <i class="bi bi-person"></i>
                                Collections
                            </a>
                            @if (Model.User.IsAdmin)
                            {
                                <a class="dropdown-item" href="@Url.ActionLink("Index", "Admin", new {userId = Model.User.Id})" }">
                                    <i class="bi bi-people"></i>
                                    Users
                                </a>
                            }
                            <a class="dropdown-item" href="@Url.Action("Index", "Home")">
                                <i class="bi bi-box-arrow-right"></i>
                                Log out
                            </a>
                        </div>
                    </div>
                }
                else
                {
                    <a class="nav-link text-light mt-2" href="@Url.Action("SignUp", "Auth")">Register</a>
                    <div class="text-light mt-2 me-2 ms-2">
                        or
                    </div>
                    <a class="nav-link text-light mt-2" href="@Url.Action("Index", "Auth")">Sign in</a>
                }
            </div>
        </div>
    </nav>
</header>
<div style="margin-top: 70px">
    <h2>My Collections</h2>
</div>
@if (!Model.Collections.Any())
{
    <h3>There are not collections yet</h3>
    <h5>Click "+" to add collection</h5>
}
else
{
    <div class="container mt-4">
        <div class="row gap-4">
            @foreach (var collection in Model.Collections)
            {
                <div class="col-md-2">
                    <div class="card shadow border-2" style="width: 224px">
                        <a class="text-decoration-none text-reset" href="@Url.Action("Index", "Items", new { collectionId = collection.Id, userId = Model.User.Id})">
                            <img class="card-img-top" src="@collection.ImageURL" alt="Card image cap" style="width: 221px; height: 150px">
                            <div class="card-body">
                                <h5 class="card-title">@collection.Name</h5>
                                <div class="d-flex justify-content-between">
                                    <p class="card-text">@collection.Items.Count() items</p>
                                </div>
                            </div>
                        </a>
                        <div class="d-flex justify-content-end">
                            <div class="dropdown mb-1 me-1">
                                <a class="dropdown-toggle text-decoration-none text-reset" href="#" id="collectionMenuLink" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    <i class="bi bi-three-dots-vertical"></i>
                                </a>
                                <div class="dropdown-menu" aria-labelledby="collectionMenuLink">
                                    <a class="dropdown-item" href="@Url.Action("Edit", "Collections", new {collectionId = collection.Id, userId = Model.User.Id})">
                                        <i class="bi bi-pencil"></i>
                                        Edit
                                    </a>
                                    <a class="dropdown-item" href="@Url.Action("Delete", "Collections", new {collectionId = collection.Id, userId = Model.User.Id})">
                                        <i class="bi bi-trash3 text-danger"></i>
                                        Delete
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}
<div class="add-button-footer">
    <div class="circle-button">
        <a data-toggle="modal" id="addingCollection" data-target="#exampleModal">
            <i class="bi bi-plus text-secondary"></i>
            <span class="hint">Add Collection</span>
        </a>
    </div>
</div>
<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Add Collection</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form asp-action="Create" asp-controller="Collections" method="post" id="formBlock" enctype="multipart/form-data">
                    <input type="hidden" name="userId" value="@Model.User.Id" />
                    <input type="hidden" id="customFieldsJson" name="customFieldsJson" />

                    <div class="form-group">
                        <label>Title</label>
                        <input type="text" class="form-control" name="name" id="name" required />
                    </div>
                    <div class="form-group">
                        <label>Category</label>
                        <select class="form-select" name="category" aria-label="Default select example">
                            @foreach (var category in ViewBag.Categories)
                            {
                                <option value="@category">@category</option>
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Description</label>
                        <textarea class="form-control" name="description" id="description"></textarea>
                    </div>
                    <div>
                    </div>

                    <div class="d-flex justify-content-between">
                        <button type="button" class="btn btn-outline-primary" data-toggle="modal" data-target="#customFieldsModal">
                            <i class="bi bi-plus"></i>
                            Add Property
                        </button>
                        <div data-mdb-ripple-init class="btn btn-outline-primary btn-rounded" id="uploadButtonContainer">
                            <label class="form-label m-1" for="imageFile" id="labelForUpload">
                                <i class="bi bi-cloud-download"></i>
                                Upload image
                            </label>
                            <input type="file" class="form-control d-none" id="imageFile" name="imageFile" />
                        </div>
                        <button type="submit" class="btn btn-outline-success">
                            <i class="bi bi-floppy"></i>
                            Save changes
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<div class="modal fade bg bg-secondary" id="customFieldsModal" tabindex="-1" role="dialog" aria-labelledby="customFieldsModalTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">New Property</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label>Property Name</label>
                        <input type="text" class="form-control" id="customName" />
                    </div>
                    <div class="form-group">
                        <label>Value</label>
                        <textarea class="form-control" id="customValue"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-outline-success" id="saveCustomField" data-dismiss="modal">Save changes</button>
            </div>
        </div>
    </div>
</div>

<script>
    const html = document.getElementById("htmlPage");
    const checkbox = document.getElementById("checkbox");

    $(document).ready(function () {
        var counter = 0;
        var customFields = {};

        $('#saveCustomField').on('click', function (e) {
            const propName = $("#customName").val();
            const propValue = $("#customValue").val();

            if (propName && propValue) {
                customFields[propName] = propValue;
                const divBody = $("#formBlock div").eq(3);
                const propValueId = "customPropValue" + counter;
                counter += 1;

                divBody.append(`
                        <div class="form-group">
                            <label>${propName}</label>
                            <textarea class="form-control" id="${propValueId}" readonly>${propValue}</textarea>
                        </div>
                    `);
                console.log(propName);
                $("#customName").val('');
                $("#customValue").val('');
            }
        });

        $('form').on('submit', function () {
            const customFieldsJson = JSON.stringify(customFields);

            $('#customFieldsJson').val(customFieldsJson);
        });


        $('#imageFile').on('change', function () {
            const fileName = $(this).val();
            const divBody = $("#formBlock div").eq(3);

            divBody.append(`
                    <div class="form-group">
                        <label>Photo</label>
                        <input type="text" class="form-control-file" id="collectionPhoto" value="${fileName}" readonly>
                    </div>
                `);

            $('#uploadButtonContainer').addClass('disabled');
            $('#labelForUpload').text('Image Uploaded').css('color', 'grey');
        });

        const theme = checkbox.checked ? "Dark" : "Light";
        html.setAttribute("data-bs-theme", theme.toLowerCase());
    });

    checkbox.addEventListener("change", () => {
        const theme = checkbox.checked ? "Dark" : "Light";
        html.setAttribute("data-bs-theme", theme.toLowerCase());

        $.ajax({
            url: '/UserPreference/EditTheme',
            type: 'POST',
            data: { theme: theme, userId: '@Model.User.Id' },
            success: function (response) {
                console.log('Theme preference updated successfully.');
            },
            error: function () {
                console.error('Failed to update theme preference.');
            }
        });
    });
</script>