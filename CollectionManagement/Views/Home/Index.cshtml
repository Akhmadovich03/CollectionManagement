@model CollectionManagement.Models.ViewModels.MainPageViewModel
@{
    ViewData["Title"] = "Home";
}
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

<header>
    <nav class="navbar fixed-top navbar-dark bg-secondary box-shadow justify-content-between">
        <div class="d-flex">
            <a class="navbar-brand text-light ms-3" href="@Url.ActionLink("Index", "Home", new {userId = Model.SignedInUser!.Id})" }">
                <i class="bi bi-collection"></i>
                @Localizer["Motto"]
            </a>
            <form class="d-flex ms-5" action="@Url.Action("Index", "Home")">
                <input type="hidden" name="userId" value="@Model.SignedInUser.Id" />
                <input class="form-control me-2" type="search" name="search" placeholder=@Localizer["Placeholder"] aria-label="Search" value="@ViewBag.Search">
                <button class="btn btn-outline-light" type="submit">
                    <i class="bi bi-search"></i>
                </button>
            </form>
        </div>
        <div class="d-flex" id="rightSideHeader">
            @{
                var isDarkTheme = Model.SignedInUser.PageTheme == CollectionManagement.Models.Enums.Theme.Dark;
                var isUzbekLanguage = Model.SignedInUser.PageLanguage == CollectionManagement.Models.Enums.Language.Uzbek;
            }
            <label class="form-check-label text-light mt-2 me-2">UZ</label>
            <div class="mt-2 me-4">
                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" id="localizer" @(isUzbekLanguage ? "" : "checked")>
                    <label class="form-check-label text-light">EN</label>
                </div>
            </div>
            <div class="mt-2 me-3"> 
                <input type="checkbox" class="checkbox" id="checkbox" @(isDarkTheme ? "checked" : "")>
                <label for="checkbox" class="checkbox-label">
                    <i class="bi bi-moon"></i>
                    <i class="bi bi-sun"></i>
                    <span class="ball"></span>
                </label>
            </div>
            <div class="d-flex me-4">
                @if (Model.SignedInUser.Email is not null)
                {
                    <div class="dropdown me-3">
                        <a class="nav-link text-white mt-2 dropdown-toggle" href="#" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            @Model.SignedInUser.UserName
                        </a>
                        <div class="dropdown-menu me-5" aria-labelledby="dropdownMenuLink">
                            <a class="dropdown-item" href="@Url.ActionLink("Edit", "Profile", new {userId = Model.SignedInUser.Id})" }">
                                <i class="bi bi-gear"></i>
                                @Localizer["Account"]
                            </a>
                            <a class="dropdown-item" href="@Url.ActionLink("Index", "Profile", new {userId = Model.SignedInUser.Id})" }">
                                <i class="bi bi-person"></i>
                                @Localizer["Collections"]
                            </a>
                            <a class="dropdown-item" href="@Url.ActionLink("Tickets", "Ticket", new {userId = Model.SignedInUser.Id})" }">
                                <i class="bi bi-ticket-perforated"></i>
                                @Localizer["Tickets"]
                            </a>
                            @if (Model.SignedInUser.IsAdmin)
                            {
                                <a class="dropdown-item" href="@Url.ActionLink("Index", "Admin", new {userId = Model.SignedInUser.Id})" }">
                                    <i class="bi bi-people"></i>
                                    @Localizer["Users"]
                                </a>
                            }
                            <a class="dropdown-item" href="@Url.Action("Index", "Home")">
                                <i class="bi bi-box-arrow-right"></i>
                                @Localizer["Log out"]
                            </a>
                        </div>
                    </div>
                }
                else
                {
                    <a class="nav-link text-light mt-2" href="@Url.Action("SignUp", "Auth")">@Localizer["Register"]</a>
                    <div class="text-light mt-2 me-2 ms-2">
                        @Localizer["or"]
                    </div>
                    <a class="nav-link text-light mt-2" href="@Url.Action("Index", "Auth")">@Localizer["Sign in"]</a>
                }
            </div>
        </div>
    </nav>
</header>
<div style="margin-top: 70px">
    <h3>@Localizer["homeItems"]</h3>
</div>
@if (!Model.Items.Any())
{
    <h5>@Localizer["homeNoItems"]</h5>
}
else
{
    <table class="table table-striped table-bordered table-hover text-center">
        <thead class="thead-dark">
            <tr>
                @if(Model.SignedInUser.IsAdmin)
                {
                    <th scope="col">Id</th>
                }
                <th scope="col">@Localizer["Name"]</th>
                <th scope="col">@Localizer["Collection"]</th>
                <th scope="col">@Localizer["Created at"]</th>
                <th scope="col">@Localizer["Likes"]</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.Items)
            {
                <tr data-href="@Url.Action("Details", "Items", new { itemId = item.Id, userId = Model.SignedInUser.Id})" class="clickable-row">
                    @if(Model.SignedInUser.IsAdmin)
                    {
                        <th scope="row">@item.Id</th>
                    }
                    <td>@item.Name</td>
                    <td>@item.Collection.Name</td>
                    <td>@item.CreatedAt</td>
                    <td>
                        <label class="form-label m-1 text-danger" id="labelForLike-@item.Id">
                            <input type="checkbox" class="form-control d-none like-checkbox" id="like-@item.Id" data-item-id="@item.Id" @(item.IsUserLiked ? "checked" : "") />
                            @if (item.IsUserLiked)
                            {
                                <i class="bi bi-heart-fill"></i>
                            }
                            else
                            {
                                <i class="bi bi-heart"></i>
                            }
                        </label>
                        <span class="like-count">@item.LikesCount</span>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
<div class="mt-5">
    <h3>@Localizer["homeCollections"]</h3>
</div>
@if(!Model.Collections.Any())
{
    <h5>There are not collections yet</h5>
}
else
{
    <div class="container">
        <div class="row gap-4">
            @foreach (var collection in Model.Collections)
            {
                <div class="col-md-2">
                    <div class="card shadow border-2" style="width: 224px">
                        <a class="text-decoration-none text-reset" href="@Url.Action("Index", "Items", new { collectionId = collection.Id, userId = Model.SignedInUser.Id})">
                            <img class="card-img-top" src="@collection.ImageURL" alt="Card image cap" style="width: 221px; height: 150px">
                            <div class="card-body">
                                <h5 class="card-title">@collection.Name</h5>
                                <div class="d-flex justify-content-between">
                                    <p class="card-text">@collection.Items.Count() @Localizer["items"]</p>
                                </div>
                            </div>
                        </a>
                        @if(Model.SignedInUser.Id == collection.UserId || Model.SignedInUser.IsAdmin)
                        {
                            <div class="d-flex justify-content-end">
                                <div class="dropdown mb-1 me-1">
                                    <a class="dropdown-toggle text-decoration-none text-reset" href="#" id="collectionMenuLink" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                        <i class="bi bi-three-dots-vertical"></i>
                                    </a>
                                    <div class="dropdown-menu" aria-labelledby="collectionMenuLink">
                                        <a class="dropdown-item" href="@Url.Action("Edit", "Collections", new {collectionId = collection.Id, userId = Model.SignedInUser.Id})">
                                            <i class="bi bi-pencil"></i>
                                            @Localizer["Edit"]
                                        </a>
                                        <a class="dropdown-item" href="@Url.Action("Delete", "Collections", new {collectionId = collection.Id, userId = Model.SignedInUser.Id})">
                                            <i class="bi bi-trash3 text-danger"></i>
                                            @Localizer["Delete"]
                                        </a>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
}

<script>
    const html = document.getElementById("htmlPage");
    const checkbox = document.getElementById("checkbox");

    $(document).ready(function () {
        $(document).on('click', '.clickable-row', function (e) {
            if (!$(e.target).closest('.like-checkbox').length && !$(e.target).closest('label').length) {
                window.location = $(this).data('href');
            }
        });

        $(document).on('change', '.like-checkbox', function () {
            var isChecked = $(this).is(':checked');
            var itemId = $(this).data('item-id');
            var userId = '@Model.SignedInUser.Id';
            var $checkbox = $(this);

            if (userId == 0) {
                alert('You need to sign in first.');
                return;
            }

            var likeCountLabel = $(this).closest('tr').find('.like-count');

            $.ajax({
                url: '@Url.Action("ToggleLike", "Items")',
                type: 'POST',
                data: { itemId: itemId, userId: userId, isLiked: isChecked },
                success: function (response) {
                    if (response.success) {
                        if (isChecked) {
                            $checkbox.siblings('i').removeClass('bi-heart').addClass('bi-heart-fill');
                        } else {
                            $checkbox.siblings('i').removeClass('bi-heart-fill').addClass('bi-heart');
                        }
                        likeCountLabel.text(response.likesCount);
                    } else {
                        alert('Error updating like status.');
                    }
                },
                error: function () {
                    alert('Failed to update like status.');
                }
            });
        });
        
        const theme = checkbox.checked ? "Dark" : "Light";
        html.setAttribute("data-bs-theme", theme.toLowerCase());
    });

    const localizer = document.getElementById("localizer");
    localizer.addEventListener('change', () => {
        const language = localizer.checked ? "English" : "Uzbek";

        $.ajax({
            url: '/UserPreference/EditLanguage',
            type: 'POST',
            data: { language: language, userId: '@Model.SignedInUser.Id' },
            success: function (response) {
                if (response.success) {
                    location.reload();
                } else {
                    console.error('Failed to update language preference.');
                }
            },
            error: function () {
                console.error('Failed to update language preference.');
            }
        });
    });

    checkbox.addEventListener("change", () => {
        const theme = checkbox.checked ? "Dark" : "Light"; 
        html.setAttribute("data-bs-theme", theme.toLowerCase());

        $.ajax({
            url: '/UserPreference/EditTheme', 
            type: 'POST',
            data: { theme: theme, userId: '@Model.SignedInUser.Id' },
            success: function (response) {
                console.log('Theme preference updated successfully.');
            },
            error: function () {
                console.error('Failed to update theme preference.');
            }
        });
    });
</script>